{"id":1290579745,"question_id":933,"lang":"python3","lang_name":"Python3","time":"2 weeks, 5 days","timestamp":1718582271,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1290579745/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"16.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def increasingBST(self, root: TreeNode) -> TreeNode:\n        node_val = []\n        \n        def traverse(root):\n            if root is None:\n                return\n            traverse(root.left)\n            node_val.append(root.val)\n            traverse(root.right)\n\n        traverse(root)\n        \n        new_root = TreeNode(node_val[0])\n        curr = new_root\n        for i in range(1, len(node_val)):\n            node = TreeNode(node_val[i])\n            curr.right = node\n            curr = curr.right\n        return new_root\n\n","compare_result":"11111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false,"flag_type":1}