{"id":1292631193,"question_id":173,"lang":"python3","lang_name":"Python3","time":"2 weeks, 3 days","timestamp":1718729226,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/1292631193/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"22.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass BSTIterator:\n\n    def __init__(self, root: Optional[TreeNode]):\n        self.root = root\n        self.nums = []\n        self.traverse(self.root)\n\n    def next(self) -> int:\n        return self.nums.pop(0).val\n        \n\n    def hasNext(self) -> bool:\n        return len(self.nums) >= 1\n        \n    def traverse(self, root):\n        if root is None:\n            return\n        \n        self.traverse(root.left)\n        self.nums.append(root)\n        self.traverse(root.right)\n\n\n\n# Your BSTIterator object will be instantiated and called as such:\n# obj = BSTIterator(root)\n# param_1 = obj.next()\n# param_2 = obj.hasNext()","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}