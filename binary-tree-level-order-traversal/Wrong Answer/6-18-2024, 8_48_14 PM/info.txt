{"id":1292820457,"question_id":102,"lang":"python3","lang_name":"Python3","time":"2 weeks, 3 days","timestamp":1718740094,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1292820457/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"N/A","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\n\nfrom queue import Queue\n\nclass Solution:\n    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\n\n        if root is None:\n            return []\n\n        q = Queue()\n        q.put(root)\n        nums = [[root.val]]\n\n        while not q.empty():\n            node = q.get()\n            pairs = []\n            if node.left:\n                pairs.append(node.left.val)\n                q.put(node.left)\n            if node.right:\n                pairs.append(node.right.val)\n                q.put(node.right)\n            if pairs != []:\n                nums.append(pairs)\n\n        return nums","compare_result":"11111110110110100000100000010000011","title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}