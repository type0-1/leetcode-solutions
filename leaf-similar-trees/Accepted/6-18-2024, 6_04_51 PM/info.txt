{"id":1292651803,"question_id":904,"lang":"python3","lang_name":"Python3","time":"2 weeks, 3 days","timestamp":1718730291,"status":10,"status_display":"Accepted","runtime":"63 ms","url":"/submissions/detail/1292651803/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"16.5 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:\n        nums = []\n        self.count = 0\n\n        def traverse(root):\n            if root is None:\n                return 0\n            \n            if root:\n                if root.left is None and root.right is None:\n                    self.count += 1\n                    nums.append(root.val)\n        \n            traverse(root.left)\n            traverse(root.right)\n\n        traverse(root1)\n        num = self.count\n        traverse(root2)\n\n        if self.count//2 != num:\n            return False\n\n        return nums[:self.count//2] == nums[self.count//2:]","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}